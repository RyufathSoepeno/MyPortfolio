#Tutorial from an SQL perspective

The queries in mongodb are called documents. Documents are documented through JSON

They have databases

However, in here, the databases can have collections, collections are an equivalent of a table

To insert it, you can either use "Add Data" or "MongoDB shell"

To export connection, simply click on the three dots

In here, you can update a certain value quickly using Update button

It works like a code, you can add var var_name = "variable"; because it uses JavaScript



MongoDB shell tutorials:

1. type "use {database_name}"

2. type "db"

3. type "db.{collection_name}"

to select all values: db["{collection_name}"].find()

to insert: db.{}.insertOne({}) or db.{}.insertMany({})
to create: db.{}.insertOne({})
to update: db.{}.updateOne({})
to select, read, or search: db.{}.findOne({})


to show all collections in a database: show {collection_name}

DON'T FORGET TO REFRESH, it is important to know when the data is in or out



difference between shell:
var: 1

and mongodb panel:
"var": 1


Aggregation:
db.orders.aggregate( [
   // Stage 1: Filter pizza order documents by pizza size
   {
      $match: { size: "medium" }
   },
   // Stage 2: Group remaining documents by pizza name and calculate total quantity
   {
      $group: { _id: "$name", totalQuantity: { $sum: "$quantity" } }
   }
] )


Other aggregations:
db.collection.estimatedDocumentCount():
Returns an approximate count of the documents in a collection or a view.

db.collection.count():
Returns a count of the number of documents in a collection or a view.

db.collection.distinct():
Returns an array of documents that have distinct values for the specified field.

Change streams allow applications to access real-time data changes without the prior complexity

Change Stream
const collection = db.collection('inventory');
const changeStream = collection.watch();
changeStream
  .on('change', next => {
    // process next document
  })
  .once('error', () => {
    // handle error
  });


We can use "await" for synchronizing timely queries or scripts:
await client.connect(); // waits until the connection is established
